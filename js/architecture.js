import {seedChanged, gsChanged} from "./function.js"

let architectureLineWidth = 2;
// let architectureLineColor = "#e8e8e8ff"
let architectureLineColor = "#b0b0b0"

d3.select("#architecture-container")
    .append("div")
        .attr("id", "hyperparameter-control-show-hide-container")
d3.select("#hyperparameter-control-show-hide-container")
        .append("img")
            .attr("id", "hyperparameter-control-show-hide-img")
            .attr("src", "./icons/pencil.svg")
            .attr("width", "10px")
d3.select("#hyperparameter-control-show-hide-container")
    .on("mouseover", (e) => {
        d3.select("#hyperparameter-control-show-hide-container").style("color", "#808080");
        d3.select("#hyperparameter-control-show-hide-img").style("filter", "invert(53%) sepia(20%) saturate(0%) hue-rotate(262deg) brightness(90%) contrast(85%)"); 
        d3.select("#hyperparameter-control-show-hide-container").style("border-color", "#808080")
    })
    .on("mouseout", (e) => {
        d3.select("#hyperparameter-control-show-hide-container").style("color", "#bdbdbd");
        d3.select("#hyperparameter-control-show-hide-img").style("filter", "invert(68%) sepia(23%) saturate(0%) hue-rotate(274deg) brightness(100%) contrast(113%)"); 
        d3.select("#hyperparameter-control-show-hide-container").style("border-color", "#bdbdbd")
    })
    .on("click", (e) => {
        let guidanceDisplayed = (d3.select("#unet-guidance-scale-control-container").style("opacity") == "1")
        let seedDisplayed = (d3.select("#unet-in-noise-seed-control-container").style("opacity") == "1")
        if (guidanceDisplayed && seedDisplayed) {
            d3.select("#unet-guidance-scale-control-container")
                .transition()
                .duration(300)
                .style("opacity", 0)
            d3.select("#unet-in-noise-seed-control-container")
                .transition()
                .duration(300)
                .style("opacity", 0)
            d3.select("#hyperparameter-control-show-hide-text")
                .text("Show Hyperparameters Settings")
        }
        else {
            d3.select("#unet-guidance-scale-control-container")
                .transition()
                .duration(300)
                .style("opacity", 1)
            d3.select("#unet-in-noise-seed-control-container")
                .transition()
                .duration(300)
                .style("opacity", 1)
            d3.select("#hyperparameter-control-show-hide-text")
                .text(" Hide Hyperparameters Settings")
        }
    })
d3.select("#hyperparameter-control-show-hide-container")
    .append("div")
    .attr("id", "hyperparameter-control-show-hide-text")
    .text("Show Hyperparameters Settings")

d3.select("#architecture-container")
    .append("svg")
        .attr("height", 0)
        .attr("width", 0)
        .append("defs")
            .append("marker")
                .attr("id", "architecture-arrow-head")
                .attr("markerWidth", "10")
                .attr("markerHeight", "4")
                .attr("refX", "0")
                .attr("refY", "2")
                .attr("orient", "auto")
                .append("polygon")
                    .attr("points", "0 0, 4 2, 0 4")
                    .attr("fill", architectureLineColor)

d3.select("#architecture-container")
    .append("div")
        .attr("id", "your-prompt-container")
        .attr("class", "architecture-component-container")
d3.select("#your-prompt-container").append("div").attr("id", "your-prompt-text")
d3.select("#your-prompt-text")
    .append("div")
        .attr("id", "your-prompt-text-your")
        .text("your")
d3.select("#your-prompt-text")
    .append("div")
        .attr("id", "your-prompt-text-prompt")
        .text("prompt")

d3.select("#your-prompt-container")
    .append("svg")
        .attr("id", "your-prompt-svg")
        .attr("class", "architecture-svg")
        .append("defs") 
            .append("linearGradient")
                .attr("id", "your-prompt-gradient")
                .attr("gradientUnits", "userSpaceOnUse")
                .attr("x1", "0")
                .attr("y1", "0")
                .attr("x2", "100%")
                .attr("y2", "0")
d3.select("#your-prompt-gradient")
    .append("stop")
        .attr("offset", "0%")
        .attr("stop-color", "#e8e8e800")
d3.select("#your-prompt-gradient")
    .append("stop")
        .attr("offset", "100%")
        .attr("stop-color", architectureLineColor)

d3.select("#your-prompt-svg")
    .append("g")
        .append("line")
            .attr("id", "your-prompt-arrow")
            .attr("x1", "0")
            .attr("y1", "10")
            .attr("x2", "50")
            .attr("y2", "10")
            .attr("stroke", "url(#your-prompt-gradient)")
            .attr("stroke-width", architectureLineWidth)
            .attr("marker-end", "url(#architecture-arrow-head)")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "tokenizer-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "tokenizer-svg")
            .attr("class", "architecture-svg")
            .append("rect")
                .attr("id", "tokenizer-rectangle")
                .attr("class", "architecture-rectangle")
                .attr("width", "80")
                .attr("height", "25")
                .attr("rx", "5")
                .attr("ry", "5")
d3.select("#tokenizer-svg")
    .append("text")
        .attr("id", "tokenizer-text")
        .attr("class", "architecture-text")
        .attr("x", "8")
        .attr("y", "18")
        .text("Tokenizer")

d3.select("#tokenizer-container").append("div").attr("id", "tokenizer-expl-container").attr("class", "architecture-expl-text-container")
d3.select("#tokenizer-expl-container").append("div").attr("id", "tokenizer-expl-text-1")
d3.select("#tokenizer-expl-container").append("div").attr("id", "tokenizer-expl-text-2")
d3.select("#tokenizer-expl-text-1")
    .append("div")
        .attr("id", "tokenizer-expl-text-converts")
        .text("converts")
d3.select("#tokenizer-expl-text-1")
    .append("div")
        .attr("id", "tokenizer-expl-text-prompt")
        .text("prompt")
d3.select("#tokenizer-expl-text-2")
    .append("div")
        .attr("id", "tokenizer-expl-text-into")
        .text("into")
d3.select("#tokenizer-expl-text-2")
    .append("div")
        .attr("id", "tokenizer-expl-text-tokens")
        .text("tokens")

d3.select("#architecture-container").append("div").attr("id", "tokenizer-clip-container")
        .attr("class", "architecture-component-container")
d3.select("#tokenizer-clip-container")
    .append("svg")
        .attr("id", "tokenizer-clip-svg")
        .attr("class", "architecture-svg")
        .append("g")
            .append("line")
                .attr("id", "tokenizer-clip-arrow")
                .attr("x1", "3")
                .attr("y1", "10")
                .attr("x2", "63")
                .attr("y2", "10")
                .attr("stroke", architectureLineColor)
                .attr("stroke-width", architectureLineWidth)
                .attr("marker-end", "url(#architecture-arrow-head)")

d3.select("#tokenizer-clip-svg").append("rect").attr("rx", "2").attr("x", "17").attr("y", "20").attr("height", "7").attr("width", "11").attr("fill", "#51B3D2");
d3.select("#tokenizer-clip-svg").append("rect").attr("rx", "2").attr("x", "30").attr("y", "20").attr("height", "7").attr("width", "16").attr("fill", "#51B3D2");
d3.select("#tokenizer-clip-svg").append("rect").attr("rx", "2").attr("x", "17").attr("y", "29").attr("height", "7").attr("width", "5").attr("fill", "#51B3D2");
d3.select("#tokenizer-clip-svg").append("rect").attr("rx", "2").attr("x", "24").attr("y", "29").attr("height", "7").attr("width", "23").attr("fill", "#51B3D2");
d3.select("#tokenizer-clip-svg").append("rect").attr("rx", "2").attr("x", "49").attr("y", "29").attr("height", "7").attr("width", "6").attr("fill", "#51B3D2");
d3.select("#tokenizer-clip-svg").append("rect").attr("rx", "2").attr("x", "17").attr("y", "38").attr("height", "7").attr("width", "16").attr("fill", "#51B3D2");
d3.select("#tokenizer-clip-svg").append("rect").attr("rx", "2").attr("x", "35").attr("y", "38").attr("height", "7").attr("width", "8").attr("fill", "#51B3D2");
d3.select("#tokenizer-clip-svg").append("circle").attr("r", "1.5").attr("cx", "36").attr("cy", "51").attr("fill", "#51B3D2b0");
d3.select("#tokenizer-clip-svg").append("circle").attr("r", "1.5").attr("cx", "36").attr("cy", "57").attr("fill", "#51B3D2b0");
d3.select("#tokenizer-clip-svg").append("circle").attr("r", "1.5").attr("cx", "36").attr("cy", "63").attr("fill", "#51B3D2b0");
// add 60px length arrow

d3.select("#architecture-container")
    .append("div")
        .attr("id", "clip-container")
        .attr("class", "architecture-component-container")
        .append("svg")
                .attr("id", "clip-svg")
                .attr("class", "architecture-svg")
                .append("rect")
                    .attr("id", "clip-rectangle")
                    .attr("class", "architecture-rectangle")
                    .attr("width", "47")
                    .attr("height", "25")
                    .attr("rx", "5")
                    .attr("ry", "5")
d3.select("#clip-svg")
    .append("text")
        .attr("id", "clip-text")
        .attr("class", "architecture-text")
        .attr("x", "8")
        .attr("y", "18")
        .text("CLIP")

d3.select("#clip-container").append("div").attr("id", "clip-expl-container").attr("class", "architecture-expl-text-container")
d3.select("#clip-expl-container").append("div").attr("id", "clip-expl-text-1").text("converts")
d3.select("#clip-expl-container").append("div").attr("id", "clip-expl-text-2")
d3.select("#clip-expl-text-2").append("div").attr("id", "clip-expl-text-2-tokens").text("tokens");
d3.select("#clip-expl-text-2").append("div").attr("id", "clip-expl-text-2-to").text("to");
d3.select("#clip-expl-container").append("div").attr("id", "clip-expl-text-3").text("vectors")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "clip-unet-container")
        .attr("class", "architecture-component-container")
            .append("svg")
                .attr("id", "clip-unet-svg")
                .attr("class", "architecture-svg")
                .append("g")
                    .append("line")
                        .attr("id", "clip-unet-arrow")
                        .attr("x1", "3")
                        .attr("y1", "10")
                        .attr("x2", "98")
                        .attr("y2", "10")
                        .attr("stroke", architectureLineColor)
                        .attr("stroke-width", architectureLineWidth)
                        .attr("marker-end", "url(#architecture-arrow-head)")

d3.select("#clip-unet-svg").append("defs").append("linearGradient").attr("id", "clip-unet-gradient").attr("gradientUnits", "userSpaceOnUse").attr("x1", "42").attr("y1", "0").attr("x2", "100").attr("y2", "0")
d3.select("#clip-unet-gradient")
    .append("stop")
        .attr("offset", "0%")
        .attr("stop-color", "#51B3D240")
d3.select("#clip-unet-gradient")
    .append("stop")
        .attr("offset", "100%")
        .attr("stop-color", "#51B3D200")
let clipUnetTokenVectorG = d3.select("#clip-unet-svg").append("g").attr("id", "clip-unet-svg-token-vector-g")
clipUnetTokenVectorG.append("rect").attr("rx", "2").attr("x", "21").attr("y", "20").attr("height", "7").attr("width", "11").attr("fill", "#51B3D2");
clipUnetTokenVectorG.append("rect").attr("x", "35").attr("y", "20").attr("height", "7").attr("width", "50").attr("fill", "url(#clip-unet-gradient)");
clipUnetTokenVectorG.append("rect").attr("rx", "2").attr("x", "15").attr("y", "29").attr("height", "7").attr("width", "16").attr("fill", "#51B3D2");
clipUnetTokenVectorG.append("rect").attr("x", "35").attr("y", "29").attr("height", "7").attr("width", "50").attr("fill", "url(#clip-unet-gradient)");
clipUnetTokenVectorG.append("rect").attr("rx", "2").attr("x", "25").attr("y", "38").attr("height", "7").attr("width", "5").attr("fill", "#51B3D2");
clipUnetTokenVectorG.append("rect").attr("x", "35").attr("y", "38").attr("height", "7").attr("width", "50").attr("fill", "url(#clip-unet-gradient)");
clipUnetTokenVectorG.append("circle").attr("r", "1.5").attr("cx", "53").attr("cy", "53").attr("fill", "#51B3D2b0");
clipUnetTokenVectorG.append("circle").attr("r", "1.5").attr("cx", "53").attr("cy", "59").attr("fill", "#51B3D2b0");
clipUnetTokenVectorG.append("circle").attr("r", "1.5").attr("cx", "53").attr("cy", "65").attr("fill", "#51B3D2b0");

d3.select("#architecture-container")
    .append("div")
        .attr("id", "unet-cycle-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "unet-cycle-svg")
            .attr("class", "architecture-svg")
            .append("g")
                .append("path")
                    .attr("id", "unet-cycle")
                    .attr("class", "architecture-dashed")
                    .attr("stroke-width", architectureLineWidth)
                    .attr("stroke", architectureLineColor)
                    .attr("marker-end", "url(#architecture-arrow-head)")
                    // .attr("stroke", "black")
                    .attr("fill", "none")
                    .attr("d", "M 122,68 L122 10 a5,5 0 0 0 -5,-5 L12,5 a5,5 0 0 0 -5,5 L7,49 a5,5 0 0 0 5,5 L35,54")
                    .style("animation-duration", "1s")
                    .style("animation-timing-function", "linear")
                    .style("animation-iteration-count", "infinite")
                    .style("animation-name", "unet-cycle-animation")
                    .style("animation-play-state", "paused")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "unet-container") // animate arrow
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "unet-svg")
            .attr("class", "architecture-svg")
            .append("rect")
                .attr("id", "unet-rectangle")
                .attr("class", "architecture-rectangle")
                .attr("width", "50")
                .attr("height", "120")
                .attr("rx", "5")
                .attr("ry", "5")
d3.select("#unet-svg")
    .append("text")
        .attr("id", "unet-text")
        .attr("class", "architecture-text")
        .attr("x", "8")
        .attr("y", "63")
        .text("UNet")   
d3.select("#unet-container")
    .append("div")
        .attr("id", "unet-expl-container")
        .attr("class", "architecture-expl-text-container")
d3.select("#unet-expl-container").append("div").attr("id", "unet-expl-text-1").text("improves");
d3.select("#unet-expl-container").append("div").attr("id", "unet-expl-text-2").text("latent");
d3.select("#unet-expl-container").append("div").attr("id", "unet-expl-text-3").text("by predicting");
d3.select("#unet-expl-container").append("div").attr("id", "unet-expl-text-4").text("noise to remove");
// d3.select("#unet-expl-container").append("div").attr("id", "unet-expl-text-5").text("guided by text vectors");

d3.select("#unet-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-container")
        .attr("class", "hyperparameter")
d3.select("#unet-guidance-scale-control-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-info-container")
            .append("img")
                .attr("id", "guidance-scale-control-info-svg")
                .attr("src", "./icons/info.svg")
                .on("mouseover", (e) => {
                    d3.select("#unet-guidance-scale-expl-window").style("display", "block")
                })
                .on("mouseout", (e) => {
                    d3.select("#unet-guidance-scale-expl-window").style("display", "none")
                })
d3.select("#unet-guidance-scale-control-info-container")
    .append("div")
        .attr("id", "unet-guidance-scale-expl-window")
        .text("Guidance scale controls how much UNet is guided by the text prompt. Higher guidance scale generates images closer to the text prompt but less creative.")
d3.select("#unet-guidance-scale-control-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-text-container")
d3.select("#unet-guidance-scale-control-text-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-text-1")
        .text("Guidance Scale")
d3.select("#unet-guidance-scale-control-text-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-text-2")
        .text("of text vector:")
d3.select("#unet-guidance-scale-control-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-dropdown-container")
        .attr("class", "custom-select hyperparameter-dropdown-container")
            .append("select")
                .on("change", gsChanged)
                .selectAll("option")
                    .data(["1.0","7.0","20.0"])
                    .enter()
                    .append("option")
                        .attr("value", d => d)
                        .text(d => d)
                        .property("selected", d => (d=="7.0"))


// TODO
d3.select("#architecture-container")
    .append("div")
        .attr("id", "unet-in-noise-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "unet-in-noise-svg")
            .attr("class", "architecture-svg")
            .on("click", (e) => {
                console.log("clicked")
                if (d3.select("#unet-in-noise-seed-control-container").style("opacity") == "0") 
                    d3.select("#unet-in-noise-seed-control-container")
                        .transition()
                        .duration(300)
                        .style("opacity", "1")
                else if (d3.select("#unet-in-noise-seed-control-container").style("opacity") == "1") 
                    d3.select("#unet-in-noise-seed-control-container")
                        .transition()
                        .duration(300)
                        .style("opacity", "0")
            })
            .append("rect")
                .attr("id", "in-noise")
                .attr("fill", "#d05b5b")
                .attr("width", "24")
                .attr("height", "24")
                .attr("x", "0")
d3.select("#unet-in-noise-container").append("div").attr("id", "unet-in-noise-expl-container").attr("class", "architecture-expl-text-container");
// d3.select("#unet-in-noise-expl-container").append("div").attr("id", "unet-in-noise-expl-text-1").text("Image summary")
d3.select("#unet-in-noise-expl-container").append("div").attr("id", "unet-in-noise-expl-text-2").text("Latent")
d3.select("#unet-in-noise-expl-container").append("div").attr("id", "unet-in-noise-expl-text-3").text("at current timestep")
d3.select("#unet-in-noise-expl-container").append("div").attr("id", "unet-in-noise-expl-text-4").text("(randomly initialized at step 0)")

d3.select("#unet-in-noise-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-container")
        .attr("class", "hyperparameter")
d3.select("#unet-in-noise-seed-control-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-text-container")
d3.select("#unet-in-noise-seed-control-text-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-text-1")
        .text("Seed")
d3.select("#unet-in-noise-seed-control-text-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-text-2")
        .text("for latent initialization at step 0:")
d3.select("#unet-in-noise-seed-control-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-dropdown-container")
        .attr("class", "custom-select hyperparameter-dropdown-container")
            .append("select")
                .on("change", seedChanged)
                .selectAll("option")
                    .data(["0","1","2","3"])
                    .enter()
                    .append("option")
                        .attr("value", d => d)
                        .text(d => d)

d3.select("#architecture-container")
    .append("div")
        .attr("id", "unet-in-noise-arrow-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "unet-in-noise-arrow-svg")
            .attr("class", "architecture-svg")
            .append("line")
                .attr("id", "unet-in-noise-arrow")
                .attr("x1", "0")
                .attr("y1", "10")
                .attr("x2", "50")
                .attr("y2", "10")
                .attr("stroke", architectureLineColor)
                .attr("stroke-width", architectureLineWidth)
                .attr("marker-end", "url(#architecture-arrow-head)")

d3.select("#architecture-container").append("div").attr("id", "unet-decoder-container") // animate arrow
    .attr("class", "architecture-component-container")
    .append("svg")
        .attr("id", "unet-decoder-svg")
        .attr("class", "architecture-svg")
        .append("g")
            .append("line")
                .attr("id", "unet-decoder-arrow")
                .attr("class", "architecture-dashed")
                .attr("x1", "3")
                .attr("y1", "10")
                .attr("x2", "177")
                .attr("y2", "10")
                .attr("stroke", architectureLineColor)
                .attr("stroke-width", architectureLineWidth)
                .attr("marker-end", "url(#architecture-arrow-head)")
                .style("animation-duration", "1s")
                .style("animation-timing-function", "linear")
                .style("animation-iteration-count", "infinite")
                .style("animation-name", "unet-decoder-arrow-animation")
                .style("animation-play-state", "paused")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "unet-out-noise-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "unet-out-noise-svg")
            .attr("class", "architecture-svg")
            .append("rect")
                .attr("id", "out-noise")
                .attr("fill", "#79b35e")
                .attr("width", "24")
                .attr("height", "24")
                .attr("x", "0")
d3.select("#unet-out-noise-container")
    .append("div")
        .attr("id", "unet-out-noise-expl-container")
        .attr("class", "architecture-expl-text-container")
d3.select("#unet-out-noise-expl-container").append("div").attr("id", "unet-out-noise-expl-text-1").text("Noise to")
d3.select("#unet-out-noise-expl-container").append("div").attr("id", "unet-out-noise-expl-text-2").text("remove")


d3.select("#architecture-container")
.append("div")
    .attr("id", "decoder-container") // almost same as tokenizer
    .attr("class", "architecture-component-container")
    .append("svg")
        .attr("id", "decoder-svg")
        .attr("class", "architecture-svg")
        .append("rect")
            .attr("id", "decoder-rectangle")
            .attr("class", "architecture-rectangle")
            .attr("width", "72")
            .attr("height", "25")
            .attr("rx", "5")
            .attr("ry", "5")
d3.select("#decoder-svg")
    .append("text")
        .attr("id", "decoder-text")
        .attr("class", "architecture-text")
        .attr("x", "8")
        .attr("y", "18")
        .text("Decoder")
d3.select("#decoder-container")
    .append("div")
        .attr("id", "decoder-expl-container")
        .attr("class", "architecture-expl-text-container")
d3.select("#decoder-expl-container").append("div").attr("id", "decoder-expl-text-1").text("converts latent to")
// d3.select("#decoder-expl-container").append("div").attr("id", "decoder-expl-text-2").text("image summary to")
// d3.select("#decoder-expl-container").append("div").attr("id", "decoder-expl-text-2").text("")
d3.select("#decoder-expl-container").append("div").attr("id", "decoder-expl-text-3").text("high res image")

// d3.select("#architecture-container").append("div").attr("id", "decoder-generated-image-container") // animate arrow 
// .attr("class", "architecture-component-container")




let generatedImageContainerDiv = d3.select("#architecture-container").append("div").attr("id", "generated-image-container").attr("class", "architecture-component-container");

d3.json("./assets/json/data.json").then(
    function(data){
        let timestep = document.getElementById("controller").timestep;
        window.selectedPromptGroupName = Object.keys(data)[window.selectedPromptGroupIdx]
        let selectedData = data[window.selectedPromptGroupName];
        console.log(selectedData);

        generatedImageContainerDiv.append("img")
            .attr("id", "generated-image")
            .attr("src", `./assets/images/${selectedPromptGroupName}/scheduled/${selectedData["prompts"][0]}_${timestep}_${seed}_${gs}.jpg`)

    })

