import {seedChanged, gsChanged, generatedImageHovered, generatedImageMouseOut} from "./function.js"

let architectureLineWidth = 2;
// let architectureLineColor = "#e8e8e8ff"
let architectureLineColor = "#b0b0b0"

d3.select("#architecture-container")
    .append("div")
    .attr("id", "stable-diffusion-description-text")
    .text("Stable Diffusion is ...")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "hyperparameter-control-show-hide-container")
d3.select("#hyperparameter-control-show-hide-container")
        .append("img")
            .attr("id", "hyperparameter-control-show-hide-img")
            .attr("src", "./icons/pencil.svg")
            .attr("width", "10px")
d3.select("#hyperparameter-control-show-hide-container")
    .on("mouseover", (e) => {
        d3.select("#hyperparameter-control-show-hide-container").style("color", "#808080");
        d3.select("#hyperparameter-control-show-hide-img").style("filter", "invert(53%) sepia(20%) saturate(0%) hue-rotate(262deg) brightness(90%) contrast(85%)"); 
        d3.select("#hyperparameter-control-show-hide-container").style("border-color", "#808080")
    })
    .on("mouseout", (e) => {
        d3.select("#hyperparameter-control-show-hide-container").style("color", "#bdbdbd");
        d3.select("#hyperparameter-control-show-hide-img").style("filter", "invert(68%) sepia(23%) saturate(0%) hue-rotate(274deg) brightness(100%) contrast(113%)"); 
        d3.select("#hyperparameter-control-show-hide-container").style("border-color", "#bdbdbd")
    })
    .on("click", (e) => {
        let guidanceDisplayed = (d3.select("#unet-guidance-scale-control-container").style("opacity") == "1")
        let seedDisplayed = (d3.select("#unet-in-noise-seed-control-container").style("opacity") == "1")
        if (guidanceDisplayed && seedDisplayed) {
            d3.select("#unet-guidance-scale-control-container")
                .transition()
                .duration(300)
                .style("opacity", 0)
            d3.select("#unet-in-noise-seed-control-container")
                .transition()
                .duration(300)
                .style("opacity", 0)
            d3.select("#hyperparameter-control-show-hide-text")
                .text("Show Hyperparameters Settings")
                .style("padding-left", "1px")
        }
        else {
            d3.select("#unet-guidance-scale-control-container")
                .transition()
                .duration(300)
                .style("opacity", 1)
            d3.select("#unet-in-noise-seed-control-container")
                .transition()
                .duration(300)
                .style("opacity", 1)
            d3.select("#hyperparameter-control-show-hide-text")
                .text(" Hide Hyperparameters Settings")
                .style("padding-left", "5px")
        }
    })
d3.select("#hyperparameter-control-show-hide-container")
    .append("div")
    .attr("id", "hyperparameter-control-show-hide-text")
    .text("Show Hyperparameters Settings")

d3.select("#architecture-container")
    .append("svg")
        .attr("height", 0)
        .attr("width", 0)
        .append("defs")
            .append("marker")
                .attr("id", "architecture-arrow-head")
                .attr("markerWidth", "10")
                .attr("markerHeight", "4")
                .attr("refX", "0")
                .attr("refY", "2")
                .attr("orient", "auto")
                .append("polygon")
                    .attr("points", "0 0, 4 2, 0 4")
                    .attr("fill", architectureLineColor)

d3.select("#architecture-container")
    .append("div")
        .attr("id", "your-prompt-container")
        .attr("class", "architecture-component-container")
d3.select("#your-prompt-container")
    .append("div")
        .attr("id", "your-prompt-text")
        .append("div")
            .attr("id", "your-prompt-text-prompt")

d3.select("#your-prompt-container")
    .append("svg")
        .attr("id", "your-prompt-svg")
        .attr("class", "architecture-svg")
        .append("defs") 
            .append("linearGradient")
                .attr("id", "your-prompt-gradient")
                .attr("gradientUnits", "userSpaceOnUse")
                .attr("x1", "0")
                .attr("y1", "0")
                .attr("x2", "100%")
                .attr("y2", "0")
d3.select("#your-prompt-gradient")
    .append("stop")
        .attr("offset", "0%")
        .attr("stop-color", "#e8e8e800")
d3.select("#your-prompt-gradient")
    .append("stop")
        .attr("offset", "100%")
        .attr("stop-color", architectureLineColor)
d3.select("#your-prompt-svg")
    .append("g")
        .append("line")
            .attr("id", "your-prompt-arrow")
            .attr("x1", "0")
            .attr("y1", "10")
            .attr("x2", "82")
            .attr("y2", "10")
            .attr("stroke", "url(#your-prompt-gradient)")
            .attr("stroke-width", architectureLineWidth)
            .attr("marker-end", "url(#architecture-arrow-head)")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "generate-text-vector-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "generate-text-vector-svg")
            .attr("class", "architecture-svg")
            .append("rect")
                .attr("id", "generate-text-vector-rectangle")
                .attr("class", "architecture-rectangle")
                .attr("width", "88")
                .attr("height", "40")
                .attr("rx", "5")
                .attr("ry", "5")
d3.select("#generate-text-vector-container")
    .append("div")
    .attr("id", "generate-text-vector-text")
    .attr("class", "architecture-text")
    .text("Generate Text Vector")


d3.select("#architecture-container")
    .append("div")
        .attr("id", "generate-text-vector-denoise-latent-container")
        .attr("class", "architecture-component-container")
            .append("svg")
                .attr("id", "generate-text-vector-denoise-latent-svg")
                .attr("class", "architecture-svg")
                .append("g")
                    .append("line")
                        .attr("id", "generate-text-vector-denoise-latent-arrow")
                        .attr("x1", "0")
                        .attr("y1", "10")
                        .attr("x2", "142")
                        .attr("y2", "10")
                        .attr("stroke", architectureLineColor)
                        .attr("stroke-width", architectureLineWidth)
                        .attr("marker-end", "url(#architecture-arrow-head)")
d3.select("#generate-text-vector-denoise-latent-container")
    .append("div")
    .text("Guide")
    .attr("id", "generate-text-vector-denoise-latent-guide-text")

d3.select("#generate-text-vector-denoise-latent-svg").append("defs").append("linearGradient").attr("id", "generate-text-vector-denoise-latent-gradient").attr("gradientUnits", "userSpaceOnUse").attr("x1", "42").attr("y1", "0").attr("x2", "100").attr("y2", "0")
d3.select("#generate-text-vector-denoise-latent-gradient")
    .append("stop")
        .attr("offset", "0%")
        .attr("stop-color", "#51B3D240")
d3.select("#generate-text-vector-denoise-latent-gradient")
    .append("stop")
        .attr("offset", "100%")
        .attr("stop-color", "#51B3D200")

let clipUnetTokenVectorG = d3.select("#generate-text-vector-denoise-latent-svg").append("g").attr("id", "generate-text-vector-denoise-latent-svg-token-vector-g")
let clipUnetTokenVectorsContainer = d3.select("#generate-text-vector-denoise-latent-container").append("div").attr("id", "generate-text-vector-denoise-latent-token-vectors-container")
clipUnetTokenVectorsContainer.append("div").attr("id", "generate-text-vector-denoise-latent-tokens-container")
clipUnetTokenVectorsContainer.append("div").attr("id", "generate-text-vector-denoise-latent-vectors-container")

clipUnetTokenVectorG.append("circle").attr("r", "1.5").attr("cx", "69").attr("cy", "94").attr("class", "dots");
clipUnetTokenVectorG.append("circle").attr("r", "1.5").attr("cx", "69").attr("cy", "100").attr("class", "dots")
clipUnetTokenVectorG.append("circle").attr("r", "1.5").attr("cx", "69").attr("cy", "106").attr("class", "dots")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "denoise-latent-cycle-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "denoise-latent-cycle-svg")
            .attr("class", "architecture-svg")
            .append("g")
                .append("path")
                    .attr("id", "denoise-latent-cycle")
                    .attr("class", "architecture-dashed")
                    .attr("stroke-width", architectureLineWidth)
                    .attr("stroke", architectureLineColor)
                    .attr("marker-end", "url(#architecture-arrow-head)")
                    .attr("fill", "none")
                    .attr("d", "M 237,123.5 l0 -50.5 a5,5 0 0 0 -5,-5 l-225,0 a5,5 0 0 0 -5,5 l0,30 a5,5 0 0 0 5,5 l46,0")
                    .style("animation-name", "unet-cycle-animation")
                    .style("animation-play-state", "paused")
d3.select("#denoise-latent-cycle-container")
    .append("div")
    .attr("id", "denoise-latent-cycle-latent-text")
    .text("Latent")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "denoise-latent-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "denoise-latent-svg")
            .attr("class", "architecture-svg")
            .append("rect")
                .attr("id", "denoise-latent-rectangle")
                .attr("class", "architecture-rectangle")
                .attr("width", "125")
                .attr("height", "95")
                .attr("rx", "5")
                .attr("ry", "5")
d3.select("#denoise-latent-container")
    .append("div")
        .attr("id", "denoise-latent-text")
        .attr("class", "architecture-text")
        .text("Denoise Latent")
d3.select("#denoise-latent-container")
    .append("div")
        .attr("id", "predict-noise")
        .text("Predict Noise")
d3.select("#denoise-latent-container")
    .append("div")
        .attr("id", "remove-noise")
        .text("Remove Noise")

d3.select("#denoise-latent-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-container")
        .attr("class", "hyperparameter")
d3.select("#unet-guidance-scale-control-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-info-container")
            .append("img")
                .attr("id", "guidance-scale-control-info-svg")
                .attr("src", "./icons/info.svg")
                .on("mouseover", (e) => {
                    d3.select("#unet-guidance-scale-expl-window").style("display", "block")
                })
                .on("mouseout", (e) => {
                    d3.select("#unet-guidance-scale-expl-window").style("display", "none")
                })
d3.select("#unet-guidance-scale-control-info-container")
    .append("div")
        .attr("id", "unet-guidance-scale-expl-window")
        .text("Guidance scale controls how much UNet is guided by the text prompt. Higher guidance scale generates images closer to the text prompt but less creative.")
d3.select("#unet-guidance-scale-control-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-text-container")
d3.select("#unet-guidance-scale-control-text-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-text-1")
        .text("Guidance Scale")
d3.select("#unet-guidance-scale-control-text-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-text-2")
        .text("of text vector:")
d3.select("#unet-guidance-scale-control-container")
    .append("div")
        .attr("id", "unet-guidance-scale-control-dropdown-container")
        .attr("class", "custom-select hyperparameter-dropdown-container")
            .append("select")
                .attr("id", "unet-guidance-scale-control-dropdown-select")
                .on("change", gsChanged)
                .selectAll("option")
                    .data(["1.0","7.0","20.0"])
                    .enter()
                    .append("option")
                        .attr("value", d => d)
                        .text(d => d)
                        .property("selected", d => (d=="7.0"))

d3.select("#architecture-container")
    .append("div")
        .attr("id", "unet-in-noise-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "unet-in-noise-svg")
            .attr("class", "architecture-svg")

d3.select("#unet-in-noise-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-container")
        .attr("class", "hyperparameter")
d3.select("#unet-in-noise-seed-control-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-text-container")
d3.select("#unet-in-noise-seed-control-text-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-text-1")
        .text("Seed")
d3.select("#unet-in-noise-seed-control-text-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-text-2")
        .text("for latent initialization at step 0:")
d3.select("#unet-in-noise-seed-control-container")
    .append("div")
        .attr("id", "unet-in-noise-seed-control-dropdown-container")
        .attr("class", "custom-select hyperparameter-dropdown-container")
            .append("select")
                .on("change", seedChanged)
                .selectAll("option")
                    .data(["0","1","2","3"])
                    .enter()
                    .append("option")
                        .attr("value", d => d)
                        .text(d => d)

d3.select("#architecture-container").append("div")
    .attr("id", "denoise-latent-decoder-container") // animate arrow
    .attr("class", "architecture-component-container")
    .append("svg")
        .attr("id", "denoise-latent-decoder-svg")
        .attr("class", "architecture-svg")
        .append("g")
            .append("line")
                .attr("id", "denoise-latent-decoder-arrow")
                .attr("class", "architecture-dashed")
                .attr("x1", "0")
                .attr("y1", "10")
                .attr("x2", "69")
                .attr("y2", "10")
                .attr("stroke", architectureLineColor)
                .attr("stroke-width", architectureLineWidth)
                .attr("marker-end", "url(#architecture-arrow-head)")
                .style("animation-name", "unet-decoder-arrow-animation")
                .style("animation-play-state", "paused")

d3.select("#architecture-container")
    .append("div")
        .attr("id", "denoise-latent-out-noise-container")
        .attr("class", "architecture-component-container")
        .append("svg")
            .attr("id", "denoise-latent-out-noise-svg")
            .attr("class", "architecture-svg")
            .append("rect")
                .attr("id", "out-noise")
                .attr("width", "24")
                .attr("height", "24")
                .attr("x", "0")
d3.select("#denoise-latent-out-noise-container")
    .append("div")
        .attr("id", "denoise-latent-out-noise-expl-container")
        .attr("class", "architecture-expl-text-container")
d3.select("#denoise-latent-out-noise-expl-container").append("div").attr("id", "denoise-latent-out-noise-expl-text-1").text("Improved")
d3.select("#denoise-latent-out-noise-expl-container").append("div").attr("id", "denoise-latent-out-noise-expl-text-2").text("Latent")


d3.select("#architecture-container")
.append("div")
    .attr("id", "decoder-container") // almost same as tokenizer
    .attr("class", "architecture-component-container")
    .append("svg")
        .attr("id", "decoder-svg")
        .attr("class", "architecture-svg")
        .append("rect")
            .attr("id", "decoder-rectangle")
            .attr("class", "architecture-rectangle")
            .attr("width", "72")
            .attr("height", "25")
            .attr("rx", "5")
            .attr("ry", "5")
d3.select("#decoder-svg")
    .append("text")
        .attr("id", "decoder-text")
        .attr("class", "architecture-text")
        .attr("x", "8")
        .attr("y", "18")
        .text("Decoder")

d3.select("#architecture-container").append("div")
    .attr("id", "decoder-generated-image-container")
    .attr("class", "architecture-component-container")
    .append("svg")
        .attr("id", "decoder-generated-image-svg")
        .attr("class", "architecture-svg")
        .append("g")
            .append("line")
                .attr("id", "decoder-generated-image-arrow")
                .attr("class", "architecture-dashed")
                .attr("x1", "0")
                .attr("y1", "10")
                .attr("x2", "26")
                .attr("y2", "10")
                .attr("stroke", architectureLineColor)
                .attr("stroke-width", architectureLineWidth)
                .attr("marker-end", "url(#architecture-arrow-head)")
                .style("animation-name", "unet-decoder-arrow-animation")
                .style("animation-play-state", "paused")

let generatedImageContainerDiv = d3.select("#architecture-container")
    .append("div")
        .attr("id", "generated-image-container")
        .attr("class", "architecture-component-container")

d3.json("./assets/json/data.json").then(
    function(data){
        let timestep = document.getElementById("controller").timestep;
        window.selectedPromptGroupName = Object.keys(data)[window.selectedPromptGroupIdx]
        let selectedData = data[window.selectedPromptGroupName];
        console.log(selectedData);

        generatedImageContainerDiv.append("img")
            .attr("id", "generated-image")
            .attr("src", `./assets/images/${selectedPromptGroupName}/scheduled/${selectedData["prompts"][0]}_${timestep}_${seed}_${gs}.jpg`)
            .on("mouseover", generatedImageHovered)
            .on("mouseout", generatedImageMouseOut)
        generatedImageContainerDiv.append("img")
            .attr("id", "generated-image-2")
            .attr("src", `./assets/images/${selectedPromptGroupName}/scheduled/${selectedData["prompts"][1]}_${timestep}_${seed}_${gs}.jpg`)
            .on("mouseover", generatedImageHovered)
            .on("mouseout", generatedImageMouseOut)
        let promptWordList = window.selectedPrompt1.split(" ")
        d3.select("#your-prompt-text-prompt")
            .text(`${promptWordList[0]} ${promptWordList[1]} ${promptWordList[2]}...`)
    })
    .then(
d3.json("./assets/json/text.json").then(
    function(data){
        let tokens = data[window.selectedPromptGroupName]["token"][selectedPrompt1]
        let vectors = data[window.selectedPromptGroupName]["vector"][selectedPrompt1]
        console.log(vectors[0])
        tokens[0] = "<start>"
        let tokenNum = 3;
        let vectorDim = 3;
        for (let i = 0 ; i < tokenNum; i++){
            d3.select("#generate-text-vector-denoise-latent-tokens-container")
                .append("div")
                    .append("div")
                    .attr("class", "generate-text-vector-denoise-latent-token")
                    .text(tokens[i])
            d3.select("#generate-text-vector-denoise-latent-vectors-container")
                .append("div")
                    .attr("class", "generate-text-vector-denoise-latent-vector")
                    .attr("id", `generate-text-vector-denoise-latent-vector-${i}`)
            for (let j = 0 ; j< vectorDim ; j++) {
                d3.select(`#generate-text-vector-denoise-latent-vector-${i}`)
                    .append("div")
                        .attr("class", "generate-text-vector-denoise-latent-vector-cell")
                        .text(Math.round(+(vectors[i][j])*100)/100)
                        .style("left", `${21*j}px`)
            }
            d3.select(`#generate-text-vector-denoise-latent-vector-${i}`)
                .append("div")
                    .attr("class", "generate-text-vector-denoise-latent-vector-cell generate-text-vector-denoise-latent-vector-cell-last")
                    .style("left", `${21*vectorDim}px`)
                    
            d3.select(`#generate-text-vector-denoise-latent-vector-${i}`)
                .append("svg")
                    .attr("class", "generate-text-vector-denoise-latent-vector-horizontal-dots-svg")
                    .attr("id", `generate-text-vector-denoise-latent-vector-horizontal-dots-svg-${i}`)
            d3.select(`#generate-text-vector-denoise-latent-vector-horizontal-dots-svg-${i}`).append("circle").attr("r", "1.5").attr("cx","16").attr("cy", "10").attr("class", "dots")
            d3.select(`#generate-text-vector-denoise-latent-vector-horizontal-dots-svg-${i}`).append("circle").attr("r", "1.5").attr("cx","22").attr("cy", "10").attr("class", "dots")
            d3.select(`#generate-text-vector-denoise-latent-vector-horizontal-dots-svg-${i}`).append("circle").attr("r", "1.5").attr("cx","28").attr("cy", "10").attr("class", "dots")
        }
    })

    )